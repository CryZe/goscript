package main


type geometry interface {
    area() float64
    perim() float64
}


type rect struct {
    width, height float64
}

func (r rect) perim() float64 {
    return 2*r.width + 2*r.height
}

func (r rect) area() float64 {
    return r.width * r.height
}

func measure(x geometry) float64 {
    return x.perim()
}

/*
type circle struct {
    radius float64
}

func (r rect) area() float64 {
    return r.width * r.height
}
func (r rect) perim() float64 {
    return 2*r.width + 2*r.height
}

func (c circle) area() float64 {
    return c.radius * c.radius
}
func (c circle) perim() float64 {
    return 1 * c.radius
}

func measure(g geometry) {
    assert(g.area() == 1)
}
*/

func aaa() (int, *rect) {
    var r rect
    r2 := &r
    r.height = 2
    assert(2 == r2.height)
    return 1, r2
}


func main() {

    var r rect
    r.height = 8
    assert(8 == r.height)

    var g geometry
    f, g := -6, &r
    assert(f == -6)
    assert(16 == measure(g))

    f, g = aaa()
    assert(f == 1)
    assert(4 == measure(g))


    /*
    r := rect{width: 1, height: 1}
    c := circle{radius: 1}

    measure(r)
    measure(c)
    */
}