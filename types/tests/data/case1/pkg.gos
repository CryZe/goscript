package main

const c = 100
var i = 1
var j = i + 1 + c


func longestPalindrome(s string) string {
    if len(s) <= 1 {
        return s
    }
    
    table := make([][]bool, len(s))
    for i := 0; i < len(table); i++ {
        table[i] = make([]bool, len(s))
    }
    
    b := 0
    e := 1
    
    for l := 0; l < len(s); l++ {
        for i := 0; i < len(s) - l; i++ {
            j := i + l
            if l == 0 {
                table[i][j] = true
            } else if l == 1 {
                table[i][j] = s[i] == s[j]
            } else {
                table[i][j] = table[i+1][j-1] && (s[i] == s[j])
            }
            if table[i][j] {
                b, e = i, j
            }
        }
    }
    return s[b:e+1]
}


func funca() {}

func main() {
    k := -3.0/700000000 * 700000000
    k += 1
    
    l := j

}